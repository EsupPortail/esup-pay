/**
 * Licensed to ESUP-Portail under one or more contributor license
 * agreements. See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.
 *
 * ESUP-Portail licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.esupportail.pay.domain;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.esupportail.pay.domain.PayEvt;
import org.esupportail.pay.domain.PayEvtMontant;

privileged aspect PayEvtMontant_Roo_Finder {
    
    public static Long PayEvtMontant.countFindPayEvtMontantsByEvt(PayEvt evt) {
        if (evt == null) throw new IllegalArgumentException("The evt argument is required");
        EntityManager em = PayEvtMontant.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM PayEvtMontant AS o WHERE o.evt = :evt", Long.class);
        q.setParameter("evt", evt);
        return ((Long) q.getSingleResult());
    }
    
    public static Long PayEvtMontant.countFindPayEvtMontantsByEvtAndUrlIdEquals(PayEvt evt, String urlId) {
        if (evt == null) throw new IllegalArgumentException("The evt argument is required");
        if (urlId == null || urlId.length() == 0) throw new IllegalArgumentException("The urlId argument is required");
        EntityManager em = PayEvtMontant.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM PayEvtMontant AS o WHERE o.evt = :evt AND o.urlId = :urlId", Long.class);
        q.setParameter("evt", evt);
        q.setParameter("urlId", urlId);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<PayEvtMontant> PayEvtMontant.findPayEvtMontantsByEvt(PayEvt evt) {
        if (evt == null) throw new IllegalArgumentException("The evt argument is required");
        EntityManager em = PayEvtMontant.entityManager();
        TypedQuery<PayEvtMontant> q = em.createQuery("SELECT o FROM PayEvtMontant AS o WHERE o.evt = :evt", PayEvtMontant.class);
        q.setParameter("evt", evt);
        return q;
    }
    
    public static TypedQuery<PayEvtMontant> PayEvtMontant.findPayEvtMontantsByEvt(PayEvt evt, String sortFieldName, String sortOrder) {
        if (evt == null) throw new IllegalArgumentException("The evt argument is required");
        EntityManager em = PayEvtMontant.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM PayEvtMontant AS o WHERE o.evt = :evt");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<PayEvtMontant> q = em.createQuery(queryBuilder.toString(), PayEvtMontant.class);
        q.setParameter("evt", evt);
        return q;
    }
    
    public static TypedQuery<PayEvtMontant> PayEvtMontant.findPayEvtMontantsByEvtAndUrlIdEquals(PayEvt evt, String urlId) {
        if (evt == null) throw new IllegalArgumentException("The evt argument is required");
        if (urlId == null || urlId.length() == 0) throw new IllegalArgumentException("The urlId argument is required");
        EntityManager em = PayEvtMontant.entityManager();
        TypedQuery<PayEvtMontant> q = em.createQuery("SELECT o FROM PayEvtMontant AS o WHERE o.evt = :evt AND o.urlId = :urlId", PayEvtMontant.class);
        q.setParameter("evt", evt);
        q.setParameter("urlId", urlId);
        return q;
    }
    
    public static TypedQuery<PayEvtMontant> PayEvtMontant.findPayEvtMontantsByEvtAndUrlIdEquals(PayEvt evt, String urlId, String sortFieldName, String sortOrder) {
        if (evt == null) throw new IllegalArgumentException("The evt argument is required");
        if (urlId == null || urlId.length() == 0) throw new IllegalArgumentException("The urlId argument is required");
        EntityManager em = PayEvtMontant.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM PayEvtMontant AS o WHERE o.evt = :evt AND o.urlId = :urlId");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<PayEvtMontant> q = em.createQuery(queryBuilder.toString(), PayEvtMontant.class);
        q.setParameter("evt", evt);
        q.setParameter("urlId", urlId);
        return q;
    }
    
}
