// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.esupportail.pay.domain;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.esupportail.pay.domain.EmailFieldsMapReference;
import org.esupportail.pay.domain.ScienceConfReference;

privileged aspect ScienceConfReference_Roo_Finder {
    
    public static Long ScienceConfReference.countFindScienceConfReferencesByEmailFieldsMapReference(EmailFieldsMapReference emailFieldsMapReference) {
        if (emailFieldsMapReference == null) throw new IllegalArgumentException("The emailFieldsMapReference argument is required");
        EntityManager em = ScienceConfReference.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ScienceConfReference AS o WHERE o.emailFieldsMapReference = :emailFieldsMapReference", Long.class);
        q.setParameter("emailFieldsMapReference", emailFieldsMapReference);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<ScienceConfReference> ScienceConfReference.findScienceConfReferencesByEmailFieldsMapReference(EmailFieldsMapReference emailFieldsMapReference) {
        if (emailFieldsMapReference == null) throw new IllegalArgumentException("The emailFieldsMapReference argument is required");
        EntityManager em = ScienceConfReference.entityManager();
        TypedQuery<ScienceConfReference> q = em.createQuery("SELECT o FROM ScienceConfReference AS o WHERE o.emailFieldsMapReference = :emailFieldsMapReference", ScienceConfReference.class);
        q.setParameter("emailFieldsMapReference", emailFieldsMapReference);
        return q;
    }
    
    public static TypedQuery<ScienceConfReference> ScienceConfReference.findScienceConfReferencesByEmailFieldsMapReference(EmailFieldsMapReference emailFieldsMapReference, String sortFieldName, String sortOrder) {
        if (emailFieldsMapReference == null) throw new IllegalArgumentException("The emailFieldsMapReference argument is required");
        EntityManager em = ScienceConfReference.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM ScienceConfReference AS o WHERE o.emailFieldsMapReference = :emailFieldsMapReference");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<ScienceConfReference> q = em.createQuery(queryBuilder.toString(), ScienceConfReference.class);
        q.setParameter("emailFieldsMapReference", emailFieldsMapReference);
        return q;
    }
    
}
